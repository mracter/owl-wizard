/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package owl_wizard;

import java.util.*;
import javax.swing.*;


/**
 *
 * @author shsu
 */
public class Finish extends javax.swing.JPanel {

    /**
     * Creates new form Finish
     */
    
    TreeMap<Integer, String> topChoices;
    
    TreeMap<String, String> blurbs;
    TreeMap<String, String> seriousBlurbs;
    
    FeatureSelector previous;
    
    ArrayList<Candidate> candidates;
    
    
    public Finish(ArrayList<Candidate> cand, FeatureSelector prev) {
        
        initComponents();
       
        loadBlurbs();
         

        previous = prev;
        
        candidates = cand;
    }
    
    private void loadBlurbs ()
    {
        
        blurbs = new TreeMap<String, String> ();
        seriousBlurbs = new TreeMap<String, String> ();
        
        blurbs.put("OWL2-DL", "Maximal expressiveness while retaining tractability.\n"
                + "Exponential polynomial time complexity.\n"
                + "Based on Description Logic.");
        
        blurbs.put("OWL2-QL", "Good for the querying of instance data.\n"
                + "It is a language that is restricted to make querying the ontology as fast as a relational database.\n"
                + "Expressive, but restricted enough that a query in OWL2-QL can be rewritten as a SQL statement.");
        
        blurbs.put("OWL2-EL", "Intended to model large, simple taxonomies with simple constraints.\n" 
                + "Easily handles large numbers of classes/properties.\n"
                );
        
        blurbs.put("OWL2-RL","OWL2-RL is designed to be compatible with a rules-based systems such as JESS, CLIPS, PROLOG."
                + "\nCan translate axioms in OWL into rules.");
        
        
        seriousBlurbs.put("OWL2-DL", "Designed to address some shortcomings of OWL.\n"
                + "Equivalent to a subset of RDF.\n"
                + "Maximal expressiveness while retaining tractability.\n"
                + "Exponential time complexity.\n"
                + "Based on Description Logic.");
        
        
        seriousBlurbs.put("OWL2-QL", "OWL2-QL is good for the querying of instance data (members of the ABox)."
                + "It is a language that is restricted to make querying the ontology as fast as a relational database. "
                + "It is expressive, but restricted enough that a query in OWL2-QL can be rewritten as a SQL statement.\n" 
                + "It places constraints on what can be used as left and right arguments for a subclassOf relationship, as well as some restrictions on the existing OWL2-DL constructs.");
        
        seriousBlurbs.put("OWL2-EL", "Based on EL++.\n"
                + "Intended to model large, simple taxonomies with simple constraints.\n" 
                + "Easily handles large numbers of classes/properties.\n"
                + "Ontology consistency, class expression subsumption, and instance verficiation can be checked in polynomial time.");
        
        seriousBlurbs.put ("OWL2-RL", "OWL 2 RL ontologies are limited in such a way that their reasoners can be implemented using rule-based reasoning systems. "
                + "Both reasoning and answering conjunctive queries can be done in polynomial time on the size of the ontology.");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        firstLabel = new javax.swing.JLabel();
        secondLabel = new javax.swing.JLabel();
        thirdLabel = new javax.swing.JLabel();
        requirementsMatchLabel = new javax.swing.JLabel();
        firstBlurb = new javax.swing.JTextArea();
        secondBlurb = new javax.swing.JTextArea();
        thirdBlurb = new javax.swing.JTextArea();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel2.setText("Your closest OWL2 Profile for features:");

        firstLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        firstLabel.setText("First Choice:");

        secondLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        secondLabel.setText("Second Choice:");

        thirdLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        thirdLabel.setText("Third Choice:");

        requirementsMatchLabel.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        requirementsMatchLabel.setText("Your closest match for requirements is: ");

        firstBlurb.setColumns(20);
        firstBlurb.setLineWrap(true);
        firstBlurb.setRows(5);
        firstBlurb.setToolTipText("");
        firstBlurb.setWrapStyleWord(true);

        secondBlurb.setColumns(20);
        secondBlurb.setLineWrap(true);
        secondBlurb.setRows(5);
        secondBlurb.setWrapStyleWord(true);

        thirdBlurb.setColumns(20);
        thirdBlurb.setLineWrap(true);
        thirdBlurb.setRows(5);
        thirdBlurb.setWrapStyleWord(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(requirementsMatchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstBlurb, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(secondLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(thirdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(secondBlurb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thirdBlurb))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(secondLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(secondBlurb, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(thirdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thirdBlurb, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(firstBlurb))
                .addGap(38, 38, 38)
                .addComponent(requirementsMatchLabel)
                .addGap(53, 53, 53))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        
        previous.tally();
        previous.preferences();
        
        Collections.sort(previous.topChoices);
        
        System.out.println("sizeeee" + previous.topChoices.size());
             
        firstLabel.setText("First Choice: " + previous.topChoices.get(0).name);
        firstBlurb.setText(seriousBlurbs.get(previous.topChoices.get(0).name));
        

        secondLabel.setText("Second Choice: " + previous.topChoices.get(1).name);
        secondBlurb.setText(blurbs.get(previous.topChoices.get(1).name));
        
        
        thirdLabel.setText("Third Choice: " + previous.topChoices.get(2).name);
        thirdBlurb.setText(blurbs.get(previous.topChoices.get(2).name));
        
        Collections.sort(candidates, Collections.reverseOrder());
        
        requirementsMatchLabel.setText("Closest matches for your general requirements: " + candidates.get(0).name + " and " + candidates.get(1).name + ".");
        
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea firstBlurb;
    private javax.swing.JLabel firstLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel requirementsMatchLabel;
    private javax.swing.JTextArea secondBlurb;
    private javax.swing.JLabel secondLabel;
    private javax.swing.JTextArea thirdBlurb;
    private javax.swing.JLabel thirdLabel;
    // End of variables declaration//GEN-END:variables
}
